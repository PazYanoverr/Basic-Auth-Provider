/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Impersonation } from "./Impersonation";
import { ImpersonationCountArgs } from "./ImpersonationCountArgs";
import { ImpersonationFindManyArgs } from "./ImpersonationFindManyArgs";
import { ImpersonationFindUniqueArgs } from "./ImpersonationFindUniqueArgs";
import { CreateImpersonationArgs } from "./CreateImpersonationArgs";
import { UpdateImpersonationArgs } from "./UpdateImpersonationArgs";
import { DeleteImpersonationArgs } from "./DeleteImpersonationArgs";
import { OrigUser } from "../../origUser/base/OrigUser";
import { ImpersonationService } from "../impersonation.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Impersonation)
export class ImpersonationResolverBase {
  constructor(
    protected readonly service: ImpersonationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Impersonation",
    action: "read",
    possession: "any",
  })
  async _impersonationsMeta(
    @graphql.Args() args: ImpersonationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Impersonation])
  @nestAccessControl.UseRoles({
    resource: "Impersonation",
    action: "read",
    possession: "any",
  })
  async impersonations(
    @graphql.Args() args: ImpersonationFindManyArgs
  ): Promise<Impersonation[]> {
    return this.service.impersonations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Impersonation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Impersonation",
    action: "read",
    possession: "own",
  })
  async impersonation(
    @graphql.Args() args: ImpersonationFindUniqueArgs
  ): Promise<Impersonation | null> {
    const result = await this.service.impersonation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Impersonation)
  @nestAccessControl.UseRoles({
    resource: "Impersonation",
    action: "create",
    possession: "any",
  })
  async createImpersonation(
    @graphql.Args() args: CreateImpersonationArgs
  ): Promise<Impersonation> {
    return await this.service.createImpersonation({
      ...args,
      data: {
        ...args.data,

        impersonatedBy: {
          connect: args.data.impersonatedBy,
        },

        impersonatedUser: {
          connect: args.data.impersonatedUser,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Impersonation)
  @nestAccessControl.UseRoles({
    resource: "Impersonation",
    action: "update",
    possession: "any",
  })
  async updateImpersonation(
    @graphql.Args() args: UpdateImpersonationArgs
  ): Promise<Impersonation | null> {
    try {
      return await this.service.updateImpersonation({
        ...args,
        data: {
          ...args.data,

          impersonatedBy: {
            connect: args.data.impersonatedBy,
          },

          impersonatedUser: {
            connect: args.data.impersonatedUser,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Impersonation)
  @nestAccessControl.UseRoles({
    resource: "Impersonation",
    action: "delete",
    possession: "any",
  })
  async deleteImpersonation(
    @graphql.Args() args: DeleteImpersonationArgs
  ): Promise<Impersonation | null> {
    try {
      return await this.service.deleteImpersonation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => OrigUser, {
    nullable: true,
    name: "impersonatedBy",
  })
  @nestAccessControl.UseRoles({
    resource: "OrigUser",
    action: "read",
    possession: "any",
  })
  async getImpersonatedBy(
    @graphql.Parent() parent: Impersonation
  ): Promise<OrigUser | null> {
    const result = await this.service.getImpersonatedBy(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => OrigUser, {
    nullable: true,
    name: "impersonatedUser",
  })
  @nestAccessControl.UseRoles({
    resource: "OrigUser",
    action: "read",
    possession: "any",
  })
  async getImpersonatedUser(
    @graphql.Parent() parent: Impersonation
  ): Promise<OrigUser | null> {
    const result = await this.service.getImpersonatedUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
