/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ApiKeyService } from "../apiKey.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ApiKeyCreateInput } from "./ApiKeyCreateInput";
import { ApiKey } from "./ApiKey";
import { ApiKeyFindManyArgs } from "./ApiKeyFindManyArgs";
import { ApiKeyWhereUniqueInput } from "./ApiKeyWhereUniqueInput";
import { ApiKeyUpdateInput } from "./ApiKeyUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ApiKeyControllerBase {
  constructor(
    protected readonly service: ApiKeyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ApiKey })
  @nestAccessControl.UseRoles({
    resource: "ApiKey",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createApiKey(@common.Body() data: ApiKeyCreateInput): Promise<ApiKey> {
    return await this.service.createApiKey({
      data: {
        ...data,

        appField: data.appField
          ? {
              connect: data.appField,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        appField: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        expiresAt: true,
        hashedKey: true,
        id: true,
        lastUsedAt: true,
        note: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ApiKey] })
  @ApiNestedQuery(ApiKeyFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ApiKey",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async apiKeys(@common.Req() request: Request): Promise<ApiKey[]> {
    const args = plainToClass(ApiKeyFindManyArgs, request.query);
    return this.service.apiKeys({
      ...args,
      select: {
        appField: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        expiresAt: true,
        hashedKey: true,
        id: true,
        lastUsedAt: true,
        note: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ApiKey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ApiKey",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async apiKey(
    @common.Param() params: ApiKeyWhereUniqueInput
  ): Promise<ApiKey | null> {
    const result = await this.service.apiKey({
      where: params,
      select: {
        appField: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        expiresAt: true,
        hashedKey: true,
        id: true,
        lastUsedAt: true,
        note: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ApiKey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ApiKey",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateApiKey(
    @common.Param() params: ApiKeyWhereUniqueInput,
    @common.Body() data: ApiKeyUpdateInput
  ): Promise<ApiKey | null> {
    try {
      return await this.service.updateApiKey({
        where: params,
        data: {
          ...data,

          appField: data.appField
            ? {
                connect: data.appField,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          appField: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          expiresAt: true,
          hashedKey: true,
          id: true,
          lastUsedAt: true,
          note: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ApiKey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ApiKey",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteApiKey(
    @common.Param() params: ApiKeyWhereUniqueInput
  ): Promise<ApiKey | null> {
    try {
      return await this.service.deleteApiKey({
        where: params,
        select: {
          appField: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          expiresAt: true,
          hashedKey: true,
          id: true,
          lastUsedAt: true,
          note: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
