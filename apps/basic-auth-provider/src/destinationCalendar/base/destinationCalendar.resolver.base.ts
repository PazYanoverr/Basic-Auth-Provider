/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DestinationCalendar } from "./DestinationCalendar";
import { DestinationCalendarCountArgs } from "./DestinationCalendarCountArgs";
import { DestinationCalendarFindManyArgs } from "./DestinationCalendarFindManyArgs";
import { DestinationCalendarFindUniqueArgs } from "./DestinationCalendarFindUniqueArgs";
import { CreateDestinationCalendarArgs } from "./CreateDestinationCalendarArgs";
import { UpdateDestinationCalendarArgs } from "./UpdateDestinationCalendarArgs";
import { DeleteDestinationCalendarArgs } from "./DeleteDestinationCalendarArgs";
import { Booking } from "../../booking/base/Booking";
import { Credential } from "../../credential/base/Credential";
import { EventType } from "../../eventType/base/EventType";
import { OrigUser } from "../../origUser/base/OrigUser";
import { DestinationCalendarService } from "../destinationCalendar.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DestinationCalendar)
export class DestinationCalendarResolverBase {
  constructor(
    protected readonly service: DestinationCalendarService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DestinationCalendar",
    action: "read",
    possession: "any",
  })
  async _destinationCalendarsMeta(
    @graphql.Args() args: DestinationCalendarCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DestinationCalendar])
  @nestAccessControl.UseRoles({
    resource: "DestinationCalendar",
    action: "read",
    possession: "any",
  })
  async destinationCalendars(
    @graphql.Args() args: DestinationCalendarFindManyArgs
  ): Promise<DestinationCalendar[]> {
    return this.service.destinationCalendars(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DestinationCalendar, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DestinationCalendar",
    action: "read",
    possession: "own",
  })
  async destinationCalendar(
    @graphql.Args() args: DestinationCalendarFindUniqueArgs
  ): Promise<DestinationCalendar | null> {
    const result = await this.service.destinationCalendar(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DestinationCalendar)
  @nestAccessControl.UseRoles({
    resource: "DestinationCalendar",
    action: "create",
    possession: "any",
  })
  async createDestinationCalendar(
    @graphql.Args() args: CreateDestinationCalendarArgs
  ): Promise<DestinationCalendar> {
    return await this.service.createDestinationCalendar({
      ...args,
      data: {
        ...args.data,

        booking: args.data.booking
          ? {
              connect: args.data.booking,
            }
          : undefined,

        credential: args.data.credential
          ? {
              connect: args.data.credential,
            }
          : undefined,

        eventType: args.data.eventType
          ? {
              connect: args.data.eventType,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DestinationCalendar)
  @nestAccessControl.UseRoles({
    resource: "DestinationCalendar",
    action: "update",
    possession: "any",
  })
  async updateDestinationCalendar(
    @graphql.Args() args: UpdateDestinationCalendarArgs
  ): Promise<DestinationCalendar | null> {
    try {
      return await this.service.updateDestinationCalendar({
        ...args,
        data: {
          ...args.data,

          booking: args.data.booking
            ? {
                connect: args.data.booking,
              }
            : undefined,

          credential: args.data.credential
            ? {
                connect: args.data.credential,
              }
            : undefined,

          eventType: args.data.eventType
            ? {
                connect: args.data.eventType,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DestinationCalendar)
  @nestAccessControl.UseRoles({
    resource: "DestinationCalendar",
    action: "delete",
    possession: "any",
  })
  async deleteDestinationCalendar(
    @graphql.Args() args: DeleteDestinationCalendarArgs
  ): Promise<DestinationCalendar | null> {
    try {
      return await this.service.deleteDestinationCalendar(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Booking, {
    nullable: true,
    name: "booking",
  })
  @nestAccessControl.UseRoles({
    resource: "Booking",
    action: "read",
    possession: "any",
  })
  async getBooking(
    @graphql.Parent() parent: DestinationCalendar
  ): Promise<Booking | null> {
    const result = await this.service.getBooking(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Credential, {
    nullable: true,
    name: "credential",
  })
  @nestAccessControl.UseRoles({
    resource: "Credential",
    action: "read",
    possession: "any",
  })
  async getCredential(
    @graphql.Parent() parent: DestinationCalendar
  ): Promise<Credential | null> {
    const result = await this.service.getCredential(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => EventType, {
    nullable: true,
    name: "eventType",
  })
  @nestAccessControl.UseRoles({
    resource: "EventType",
    action: "read",
    possession: "any",
  })
  async getEventType(
    @graphql.Parent() parent: DestinationCalendar
  ): Promise<EventType | null> {
    const result = await this.service.getEventType(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => OrigUser, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "OrigUser",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: DestinationCalendar
  ): Promise<OrigUser | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
