/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { EventTypeCustomInputService } from "../eventTypeCustomInput.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { EventTypeCustomInputCreateInput } from "./EventTypeCustomInputCreateInput";
import { EventTypeCustomInput } from "./EventTypeCustomInput";
import { EventTypeCustomInputFindManyArgs } from "./EventTypeCustomInputFindManyArgs";
import { EventTypeCustomInputWhereUniqueInput } from "./EventTypeCustomInputWhereUniqueInput";
import { EventTypeCustomInputUpdateInput } from "./EventTypeCustomInputUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class EventTypeCustomInputControllerBase {
  constructor(
    protected readonly service: EventTypeCustomInputService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EventTypeCustomInput })
  @nestAccessControl.UseRoles({
    resource: "EventTypeCustomInput",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createEventTypeCustomInput(
    @common.Body() data: EventTypeCustomInputCreateInput
  ): Promise<EventTypeCustomInput> {
    return await this.service.createEventTypeCustomInput({
      data: {
        ...data,

        eventType: {
          connect: data.eventType,
        },
      },
      select: {
        eventType: {
          select: {
            id: true,
          },
        },

        id: true,
        label: true,
        placeholder: true,
        required: true,
        type: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [EventTypeCustomInput] })
  @ApiNestedQuery(EventTypeCustomInputFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "EventTypeCustomInput",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async eventTypeCustomInputs(
    @common.Req() request: Request
  ): Promise<EventTypeCustomInput[]> {
    const args = plainToClass(EventTypeCustomInputFindManyArgs, request.query);
    return this.service.eventTypeCustomInputs({
      ...args,
      select: {
        eventType: {
          select: {
            id: true,
          },
        },

        id: true,
        label: true,
        placeholder: true,
        required: true,
        type: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EventTypeCustomInput })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EventTypeCustomInput",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async eventTypeCustomInput(
    @common.Param() params: EventTypeCustomInputWhereUniqueInput
  ): Promise<EventTypeCustomInput | null> {
    const result = await this.service.eventTypeCustomInput({
      where: params,
      select: {
        eventType: {
          select: {
            id: true,
          },
        },

        id: true,
        label: true,
        placeholder: true,
        required: true,
        type: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EventTypeCustomInput })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EventTypeCustomInput",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateEventTypeCustomInput(
    @common.Param() params: EventTypeCustomInputWhereUniqueInput,
    @common.Body() data: EventTypeCustomInputUpdateInput
  ): Promise<EventTypeCustomInput | null> {
    try {
      return await this.service.updateEventTypeCustomInput({
        where: params,
        data: {
          ...data,

          eventType: {
            connect: data.eventType,
          },
        },
        select: {
          eventType: {
            select: {
              id: true,
            },
          },

          id: true,
          label: true,
          placeholder: true,
          required: true,
          type: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EventTypeCustomInput })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EventTypeCustomInput",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteEventTypeCustomInput(
    @common.Param() params: EventTypeCustomInputWhereUniqueInput
  ): Promise<EventTypeCustomInput | null> {
    try {
      return await this.service.deleteEventTypeCustomInput({
        where: params,
        select: {
          eventType: {
            select: {
              id: true,
            },
          },

          id: true,
          label: true,
          placeholder: true,
          required: true,
          type: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
