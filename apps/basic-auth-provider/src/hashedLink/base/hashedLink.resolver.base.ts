/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { HashedLink } from "./HashedLink";
import { HashedLinkCountArgs } from "./HashedLinkCountArgs";
import { HashedLinkFindManyArgs } from "./HashedLinkFindManyArgs";
import { HashedLinkFindUniqueArgs } from "./HashedLinkFindUniqueArgs";
import { CreateHashedLinkArgs } from "./CreateHashedLinkArgs";
import { UpdateHashedLinkArgs } from "./UpdateHashedLinkArgs";
import { DeleteHashedLinkArgs } from "./DeleteHashedLinkArgs";
import { EventType } from "../../eventType/base/EventType";
import { HashedLinkService } from "../hashedLink.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => HashedLink)
export class HashedLinkResolverBase {
  constructor(
    protected readonly service: HashedLinkService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "HashedLink",
    action: "read",
    possession: "any",
  })
  async _hashedLinksMeta(
    @graphql.Args() args: HashedLinkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [HashedLink])
  @nestAccessControl.UseRoles({
    resource: "HashedLink",
    action: "read",
    possession: "any",
  })
  async hashedLinks(
    @graphql.Args() args: HashedLinkFindManyArgs
  ): Promise<HashedLink[]> {
    return this.service.hashedLinks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => HashedLink, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HashedLink",
    action: "read",
    possession: "own",
  })
  async hashedLink(
    @graphql.Args() args: HashedLinkFindUniqueArgs
  ): Promise<HashedLink | null> {
    const result = await this.service.hashedLink(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HashedLink)
  @nestAccessControl.UseRoles({
    resource: "HashedLink",
    action: "create",
    possession: "any",
  })
  async createHashedLink(
    @graphql.Args() args: CreateHashedLinkArgs
  ): Promise<HashedLink> {
    return await this.service.createHashedLink({
      ...args,
      data: {
        ...args.data,

        eventType: {
          connect: args.data.eventType,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HashedLink)
  @nestAccessControl.UseRoles({
    resource: "HashedLink",
    action: "update",
    possession: "any",
  })
  async updateHashedLink(
    @graphql.Args() args: UpdateHashedLinkArgs
  ): Promise<HashedLink | null> {
    try {
      return await this.service.updateHashedLink({
        ...args,
        data: {
          ...args.data,

          eventType: {
            connect: args.data.eventType,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HashedLink)
  @nestAccessControl.UseRoles({
    resource: "HashedLink",
    action: "delete",
    possession: "any",
  })
  async deleteHashedLink(
    @graphql.Args() args: DeleteHashedLinkArgs
  ): Promise<HashedLink | null> {
    try {
      return await this.service.deleteHashedLink(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => EventType, {
    nullable: true,
    name: "eventType",
  })
  @nestAccessControl.UseRoles({
    resource: "EventType",
    action: "read",
    possession: "any",
  })
  async getEventType(
    @graphql.Parent() parent: HashedLink
  ): Promise<EventType | null> {
    const result = await this.service.getEventType(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
